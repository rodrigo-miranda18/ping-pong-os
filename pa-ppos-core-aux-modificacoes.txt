/**
*  Funções criadas
*/
void task_set_eet (task_t *task, int et) {
    task_t *task_ptr = task == NULL ? taskExec : task;

    task_ptr->estimated_execution_time = et;
}

int task_get_eet (task_t *task) {
    task_t *task_ptr = task == NULL ? taskExec : task;

    return task_ptr->estimated_execution_time;
}

int task_get_ret (task_t *task) {
    task_t *task_ptr = task == NULL ? taskExec : task;

    return (task->estimated_execution_time - task->running_time);
}

// Estrutura que define um tratador de sinal (deve ser global ou static)
struct sigaction action ;

// Estrutura de inicialização to timer
struct itimerval timer ;

// Tamanho do quantum em milisegundos
int quantum_size = 20;

void ticks_handler (int signum) {
    systemTime += 1;
    taskExec->running_time += 1;
    taskExec->ticks_counter -= 1;

    if (taskExec->ticks_counter == 0) {
        task_yield(); // Preemptar tarefa
    }
}

void set_timer () {
    // Registra a ação para o sinal de timer SIGALRM
    action.sa_handler = ticks_handler ;
    sigemptyset (&action.sa_mask) ;
    action.sa_flags = 0 ;

    if (sigaction (SIGALRM, &action, 0) < 0)
    {
        perror ("Erro em sigaction: ") ;
        exit (1) ;
    }

    // Ajusta valores do temporizador
    timer.it_value.tv_usec = 1000;      // primeiro disparo, em micro-segundos
    timer.it_interval.tv_usec = 1000;   // disparos subsequentes, em micro-segundos

    // arma o temporizador ITIMER_REAL (vide man setitimer)
    if (setitimer (ITIMER_REAL, &timer, 0) < 0)
    {
        perror ("Erro em setitimer: ") ;
        exit (1) ;
    }
}

/**
*  Funções modificadas
*/

void after_ppos_init () {
    set_timer();

#ifdef DEBUG
    printf("\ninit - AFTER");
#endif
}

void after_task_create (task_t *task ) {
    task->start_execution_time = systime();

#ifdef DEBUG
    printf("\ntask_create - AFTER - [%d]", task->id);
#endif
}

void before_task_exit () {
    taskExec->execution_time = systime() - taskExec->start_execution_time;

#ifdef DEBUG
    printf("\ntask_exit - BEFORE - [%d]", taskExec->id);
#endif
}

void after_task_exit () {
    printf ("Task [%d] exit: execution time %d ms, processor time %d ms, %d activations\n", taskExec->id, taskExec->execution_time, taskExec->running_time, taskExec->activations) ;

#ifdef DEBUG
    printf("\ntask_exit - AFTER- [%d]", taskExec->id);
#endif
}

void after_task_switch ( task_t *task ) {
    task->activations += 1;
    task->ticks_counter = quantum_size;

#ifdef DEBUG
    printf("\ntask_switch - AFTER - [%d -> %d]", taskExec->id, task->id);
#endif
}

task_t * scheduler() {
    if ( readyQueue == NULL ) {
        return NULL;
    }

    task_t *current_task = task_get_ret(readyQueue) > 0 ? readyQueue : readyQueue->next;
    task_t *shortest_remaining_time_task = current_task;

    while (current_task->next != readyQueue) {
        if (task_get_ret(current_task->next) < task_get_ret(shortest_remaining_time_task) && task_get_ret(current_task->next) > 0) {
            shortest_remaining_time_task = current_task->next;
        }

        current_task = current_task->next;
    }

    return shortest_remaining_time_task;
}